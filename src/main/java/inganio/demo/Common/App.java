/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inganio.demo.Common;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Scanner;

import javax.crypto.Cipher;

public class App {
    private static String readPemFile(String filePath) {
        StringBuffer sb = null;

        try (
            FileInputStream is = new FileInputStream(filePath);
            Scanner sc = new Scanner(is, "UTF-8");
        ) {
            sb = new StringBuffer();

            while (sc.hasNextLine()) {
                sb.append(sc.nextLine());
            }
            if (sc.ioException() != null) {
                throw sc.ioException();
            }
        } catch(FileNotFoundException e) {
            System.err.println("File not found");
        } catch (SecurityException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        String result = sb.toString()
            .replace("-----BEGIN PUBLIC KEY-----", "")
            .replace("-----END PUBLIC KEY-----", "");
        sb.setLength(0);
        return result;
    }

    private static RSAPublicKey getPublicKey(String pem) {
        byte[] decoded = null;
        KeyFactory kf = null;
        RSAPublicKey publicKey = null;

        try {
            decoded = Base64.getDecoder().decode(pem);
            kf = KeyFactory.getInstance("RSA");
            publicKey = (RSAPublicKey) kf.generatePublic(new X509EncodedKeySpec(decoded));
        } catch (IllegalArgumentException e) {
            System.err.println("Invalid pem file");
            e.printStackTrace();
        } catch (GeneralSecurityException e) {
            System.err.println("PublicKey generation failed");
            e.printStackTrace();
        }

        return publicKey;
    }

    private static String encrypt(String plainText, RSAPublicKey publicKey) {
        String result = null;

        try {
            Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding");
            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
            result = Base64.getEncoder().encodeToString(cipher.doFinal(plainText.getBytes()));
        } catch (GeneralSecurityException e) {
            System.err.println("PublicKey encryption failed");
            e.printStackTrace();
        }

        return result;
    }

    public static void main(String[] args) {
        String publicKeyFilePath = "/Users/sam/Downloads/rsa-public-key.pem";
        String multisigKey = "801... or 802...";

        String pem = readPemFile(publicKeyFilePath);
        RSAPublicKey publicKey = getPublicKey(pem);

        String encrypted = encrypt(multisigKey, publicKey);
        System.out.println(encrypted);
    }
}